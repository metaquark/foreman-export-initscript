#! /bin/sh
### BEGIN INIT INFO
# Provides:          <%= app %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Generated initscript for <%= app %>
# Description:       This file starts <%= app %>. It should be placed in /etc/init.d
### END INIT INFO

# Author: Foreman generator
#

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Runs <%= app %>"
NAME=<%= app %>
PIDDIR=/var/run/$NAME
SCRIPTNAME=/etc/init.d/$NAME
USERNAME=<%= user %>
ENVIRONMENT=production

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

#
# Function that starts the daemon/service
#
do_start()
{
	mkdir -p $PIDDIR
	mkdir -p <%= log %>
	chown $USERNAME: <%= log %>
	# START APPLICATION: <%= app %>
	<% engine.each_process do |name, process| %>
		# START PROCESS: <%= name %>
		<% 1.upto(engine.formation[name]) do |num| %>
			# START CONCURRENT: <%= num %>
				# Start: <%= app %>.<%= name %>.<%= num %>
				# Create $PIDDIR/<%= name %>.<%= num %>.pid
				PIDFILE=$PIDDIR/<%= name %>.<%= num %>.pid

				RUNNING=0
				if [ -f $PIDFILE ]; then
					kill -0 `cat $PIDFILE` 2> /dev/null && RUNNING=1
				fi
				if [ $RUNNING = 1 ]; then
					echo "<%= name %>.<%= num %> is running already with PID `cat $PIDFILE`, consider stopping it first"
				else
					((su - $USERNAME -c '<%= "source #{rvm_path};" if rvm_path %> cd <%= engine.root %>; export PORT=<%= engine.port_for(process, num) %>;<% engine.environment.each_pair do |var,env| %> export <%= var.upcase %>=<%= env %>; <% end %> export RAILS_ENV=production; nohup -- <%= process.command %> >> <%= log %>/<%=name%>-<%=num%>.log 2>&1 & echo $!; sleep 0.5') > $PIDFILE)
					echo "Started <%= name %>.<%= num %> with PID `cat $PIDFILE`"
				fi
		<% end %>
	<% end %>
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# STOP APPLICATION: <%= app %>
	<% engine.each_process do |name, process| %>
		# STOP PROCESS: <%= name %>
		<% 1.upto(engine.formation[name]) do |num| %>
			# STOP CONCURRENT: <%= num %>
				# Stop: <%= app %>.<%= name %>.<%= num %>
				PIDFILE=$PIDDIR/<%= name %>.<%= num %>.pid
				if [ -f $PIDFILE ]; then
					echo -n "Stopping <%= name %>.<%= num %> with PID `cat $PIDFILE`... "
					kill `cat $PIDFILE` 2> /dev/null
					while kill -0 `cat $PIDFILE` 2> /dev/null; do
						sleep 0.5
					done
					echo "done"
				else
					echo "<%= name %>.<%= num %> is already stopped"
				fi
		<% end %>
	<% end %>
}

do_status()
{
	ALL_RUNNING=1
	# STATUS APPLICATION: <%= app %>
	<% engine.each_process do |name, process| %>
		# STATUS PROCESS: <%= name %>
		<% 1.upto(engine.formation[name]) do |num| %>
			# STATUS CONCURRENT: <%= num %>
				# STATUS: <%= app %>.<%= name %>.<%= num %>
				RUNNING=0
				PIDFILE=$PIDDIR/<%= name %>.<%= num %>.pid
				if [ -f $PIDFILE ]; then
					kill -0 `cat $PIDFILE` 2> /dev/null && RUNNING=1
				fi
				if [ $RUNNING = 1 ]; then
					echo "<%= name %>.<%= num %> is running with PID `cat $PIDFILE`"
				else
					ALL_RUNNING=0
					echo "<%= name %>.<%= num %> is stopped"
				fi
		<% end %>
	<% end %>
	if [ $ALL_RUNNING = 1 ]; then
		return 0
	else
		return 1
	fi 
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && echo "Starting $NAME"
	do_start
	;;
  stop)
	[ "$VERBOSE" != no ] && echo "Stopping $NAME"
	do_stop
	;;
  status)
	do_status && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	[ "$VERBOSE" != no ] && echo "Restarting $NAME"
	do_stop
	do_start
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
	exit 3
	;;
esac

:
